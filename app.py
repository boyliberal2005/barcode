import streamlit as st
from PIL import Image
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime, date
import pandas as pd
import pytz
import io
import base64

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Qu√©t Barcode",
    page_icon="üì¶",
    layout="centered"
)

# CSS t√πy ch·ªânh - T·ªëi gi·∫£n
st.markdown("""
    <style>
    .main {background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);}
    .stButton>button {width: 100%; background-color: #4CAF50; color: white; height: 3em; border-radius: 10px; font-weight: bold;}
    </style>
""", unsafe_allow_html=True)

# Kh·ªüi t·∫°o session state t·ªëi gi·∫£n
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'scanned_product' not in st.session_state:
    st.session_state.scanned_product = None
if 'barcode_data' not in st.session_state:
    st.session_state.barcode_data = None

# Th√¥ng tin ƒëƒÉng nh·∫≠p
HARDCODED_USER = "admin@123"
HARDCODED_PASS = "A@bcde6789"

# ==================== CACHE FUNCTIONS ====================

@st.cache_resource
def get_google_sheet_client():
    """Cache Google Sheets client - ch·ªâ k·∫øt n·ªëi 1 l·∫ßn"""
    try:
        scope = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ]
        if "gcp_service_account" in st.secrets:
            creds = Credentials.from_service_account_info(
                dict(st.secrets["gcp_service_account"]), scopes=scope
            )
        else:
            creds = Credentials.from_service_account_file('credentials.json', scopes=scope)
        return gspread.authorize(creds)
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi: {e}")
        return None

@st.cache_data(ttl=300)  # Cache 5 ph√∫t
def get_product_list(_client, sheet_name):
    """Cache danh s√°ch s·∫£n ph·∫©m - tr√°nh load l·∫°i li√™n t·ª•c"""
    try:
        spreadsheet = _client.open(sheet_name)
        sheet = spreadsheet.worksheet("Product_List")
        data = sheet.get_all_records()
        df = pd.DataFrame(data)
        if not df.empty:
            df['Barcode'] = df['Barcode'].astype(str).str.strip()
        return df
    except gspread.exceptions.WorksheetNotFound:
        return pd.DataFrame(columns=['Barcode', 'T√™n SP', 'Th∆∞∆°ng hi·ªáu'])
    except Exception as e:
        st.error(f"L·ªói load Product_List: {e}")
        return pd.DataFrame(columns=['Barcode', 'T√™n SP', 'Th∆∞∆°ng hi·ªáu'])

def get_worksheet(_client, sheet_name, worksheet_name):
    """L·∫•y worksheet, t·∫°o n·∫øu ch∆∞a c√≥"""
    try:
        spreadsheet = _client.open(sheet_name)
        try:
            return spreadsheet.worksheet(worksheet_name)
        except gspread.exceptions.WorksheetNotFound:
            sheet = spreadsheet.add_worksheet(title=worksheet_name, rows=100, cols=10)
            if worksheet_name == "Barcode_Data":
                sheet.append_row(["Barcode", "T√™n SP", "Th∆∞∆°ng hi·ªáu", "S·ªë l∆∞·ª£ng", "ƒê∆°n v·ªã", "Th·ªùi gian"])
            elif worksheet_name == "Product_List":
                sheet.append_row(["Barcode", "T√™n SP", "Th∆∞∆°ng hi·ªáu"])
            return sheet
    except Exception as e:
        st.error(f"L·ªói worksheet: {e}")
        return None

# ==================== LAZY IMPORT ====================

def scan_barcode_pyzbar(image):
    """Lazy import pyzbar v√† cv2 ch·ªâ khi c·∫ßn"""
    try:
        import cv2
        import numpy as np
        from pyzbar import pyzbar
        
        img_array = np.array(image)
        if len(img_array.shape) == 3:
            gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
        else:
            gray = img_array

        barcodes = pyzbar.decode(gray)
        if barcodes:
            return barcodes[0].data.decode('utf-8')
        
        # Th·ª≠ v·ªõi ti·ªÅn x·ª≠ l√Ω n·∫øu kh√¥ng qu√©t ƒë∆∞·ª£c
        gray = cv2.GaussianBlur(gray, (5, 5), 0)
        barcodes = pyzbar.decode(gray)
        if barcodes:
            return barcodes[0].data.decode('utf-8')
        
        return None
    except Exception as e:
        return None

def scan_barcode_gemini(image):
    """Lazy import Gemini ch·ªâ khi pyzbar th·∫•t b·∫°i"""
    try:
        import google.generativeai as genai
        
        genai.configure(api_key="AIzaSyA52qNG0pm7JD9E5Jhp_GhcwjdgXJd8sXQ")
        img_bytes = io.BytesIO()
        image.save(img_bytes, format='PNG')
        img_bytes = img_bytes.getvalue()
        
        model = genai.GenerativeModel('gemini-2.0-flash')
        response = model.generate_content([
            "Read the barcode number only. Return just the digits (e.g., '8935049502142'). If no barcode, return 'None'.",
            {"mime_type": "image/png", "data": img_bytes}
        ])
        barcode_text = response.text.strip()
        if barcode_text.lower() != 'none':
            return barcode_text
        return None
    except Exception as e:
        return None

def scan_barcode(image):
    """Qu√©t barcode: pyzbar tr∆∞·ªõc, Gemini fallback"""
    result = scan_barcode_pyzbar(image)
    if result:
        return result
    with st.spinner("D√πng AI ƒë·ªÉ qu√©t..."):
        return scan_barcode_gemini(image)

# ==================== CORE FUNCTIONS ====================

def lookup_product_fast(barcode, df):
    """Tra c·ª©u nhanh t·ª´ DataFrame ƒë√£ cache"""
    barcode = str(barcode).strip()
    match = df[df['Barcode'] == barcode]
    if not match.empty:
        return {
            'name': match.iloc[0]['T√™n SP'],
            'brand': match.iloc[0]['Th∆∞∆°ng hi·ªáu']
        }
    return {'name': 'S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh', 'brand': 'N/A'}

def update_product(client, sheet_name, barcode, product_name, brand):
    """C·∫≠p nh·∫≠t s·∫£n ph·∫©m v√† clear cache"""
    sheet = get_worksheet(client, sheet_name, "Product_List")
    if not sheet:
        return False
    try:
        sheet.append_row([str(barcode).strip(), product_name, brand])
        # Clear cache ƒë·ªÉ load l·∫°i data m·ªõi
        get_product_list.clear()
        return True
    except Exception as e:
        st.error(f"L·ªói: {e}")
        return False

def send_to_sheet(client, sheet_name, data):
    """G·ª≠i d·ªØ li·ªáu qu√©t"""
    sheet = get_worksheet(client, sheet_name, "Barcode_Data")
    if not sheet:
        return False
    try:
        row = [
            data['barcode'], data['product_name'], data['brand'],
            data['quantity'], data['unit'], data['timestamp']
        ]
        sheet.append_row(row)
        return True
    except Exception as e:
        st.error(f"L·ªói: {e}")
        return False

# ==================== AUTH ====================

def check_login():
    """Ki·ªÉm tra query params cho login"""
    logged_in = st.query_params.get("logged_in", None)
    if logged_in:
        try:
            return base64.b64decode(logged_in).decode("utf-8") == "true"
        except:
            return False
    return False

def set_logged_in():
    st.query_params["logged_in"] = base64.b64encode(b"true").decode("utf-8")
    st.session_state.logged_in = True

def logout():
    if "logged_in" in st.query_params:
        del st.query_params["logged_in"]
    st.session_state.logged_in = False
    st.session_state.scanned_product = None
    st.session_state.barcode_data = None
    st.rerun()

# ==================== MAIN APP ====================

# Ki·ªÉm tra login t·ª´ query params
if not st.session_state.logged_in:
    st.session_state.logged_in = check_login()

# Form ƒëƒÉng nh·∫≠p
if not st.session_state.logged_in:
    st.title("üîí ƒêƒÉng Nh·∫≠p")
    with st.form("login_form"):
        username = st.text_input("T√™n ng∆∞·ªùi d√πng")
        password = st.text_input("M·∫≠t kh·∫©u", type="password")
        submit = st.form_submit_button("ƒêƒÉng nh·∫≠p", type="primary")
        
        if submit:
            if username == HARDCODED_USER and password == HARDCODED_PASS:
                set_logged_in()
                st.success("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                st.rerun()
            else:
                st.error("‚ùå Sai th√¥ng tin ƒëƒÉng nh·∫≠p!")
    st.stop()

# ==================== APP CH√çNH ====================

st.title("üì¶ Viva Star Coffee - Ki·ªÉm H√†ng")
st.markdown("---")

# N√∫t ƒëƒÉng xu·∫•t
if st.button("üö™ ƒêƒÉng xu·∫•t"):
    logout()

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh")
    sheet_name = st.text_input("T√™n Google Sheet", value="Barcode_Data")

# K·∫øt n·ªëi Google Sheets (ch·ªâ 1 l·∫ßn)
client = get_google_sheet_client()
if not client:
    st.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Google Sheets!")
    st.stop()

# Load Product_List (cache 5 ph√∫t)
product_df = get_product_list(client, sheet_name)

# ==================== TABS ====================

tab1, tab2, tab3 = st.tabs(["üì∏ Qu√©t Barcode", "üìä Xem D·ªØ Li·ªáu", "üõ† C·∫≠p nh·∫≠t Barcode"])

# ===== TAB 1: QU√âT BARCODE =====
with tab1:
    scan_method = st.radio(
        "Ph∆∞∆°ng th·ª©c qu√©t:",
        ["üì∑ Ch·ª•p ·∫£nh", "üìÅ Upload ·∫£nh", "‚å®Ô∏è Nh·∫≠p th·ªß c√¥ng"],
        horizontal=True
    )

    image = None
    barcode = None

    if scan_method == "üì∑ Ch·ª•p ·∫£nh":
        camera_image = st.camera_input("Ch·ª•p ·∫£nh barcode")
        if camera_image:
            image = Image.open(camera_image)
            st.image(image, caption="·∫¢nh ƒë√£ ch·ª•p", use_column_width=True)
            with st.spinner("ƒêang qu√©t..."):
                barcode = scan_barcode(image)

    elif scan_method == "üìÅ Upload ·∫£nh":
        uploaded_file = st.file_uploader("Ch·ªçn ·∫£nh", type=['jpg', 'jpeg', 'png'])
        if uploaded_file:
            image = Image.open(uploaded_file)
            st.image(image, caption="·∫¢nh ƒë√£ upload", use_column_width=True)
            with st.spinner("ƒêang qu√©t..."):
                barcode = scan_barcode(image)

    else:  # Nh·∫≠p th·ªß c√¥ng
        manual_barcode = st.text_input("Nh·∫≠p m√£ barcode:", max_chars=20)
        if st.button("üîç Tra c·ª©u"):
            if manual_barcode:
                barcode = manual_barcode

    # X·ª≠ l√Ω barcode v·ª´a qu√©t
    if barcode:
        st.session_state.barcode_data = barcode
        st.session_state.scanned_product = lookup_product_fast(barcode, product_df)
        st.success(f"‚úÖ Barcode: {barcode}")
        
        if st.session_state.scanned_product['name'] == 'S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh':
            st.warning(f"‚ö†Ô∏è Barcode {barcode} ch∆∞a c√≥. Vui l√≤ng th√™m trong tab 'C·∫≠p nh·∫≠t Barcode'.")

    # Form nh·∫≠p li·ªáu n·∫øu ƒë√£ c√≥ s·∫£n ph·∫©m
    if st.session_state.scanned_product and st.session_state.scanned_product['name'] != 'S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh':
        st.markdown("---")
        st.subheader("üì¶ Th√¥ng tin s·∫£n ph·∫©m")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("T√™n", st.session_state.scanned_product['name'])
        with col2:
            st.metric("Th∆∞∆°ng hi·ªáu", st.session_state.scanned_product['brand'])
        
        st.info(f"üî¢ Barcode: **{st.session_state.barcode_data}**")
        
        st.markdown("---")
        col1, col2 = st.columns([2, 1])
        with col1:
            quantity = st.number_input("S·ªë l∆∞·ª£ng:", min_value=0.0, step=0.1, format="%.2f")
        with col2:
            unit = st.selectbox("ƒê∆°n v·ªã:", ["ml", "L", "g", "kg", "c√°i", "h·ªôp", "chai"])
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÑ Qu√©t l·∫°i", use_container_width=True):
                st.session_state.scanned_product = None
                st.session_state.barcode_data = None
                st.rerun()
        with col2:
            if st.button("üì§ G·ª≠i", type="primary", use_container_width=True):
                if quantity > 0:
                    data = {
                        'barcode': st.session_state.barcode_data,
                        'product_name': st.session_state.scanned_product['name'],
                        'brand': st.session_state.scanned_product['brand'],
                        'quantity': quantity,
                        'unit': unit,
                        'timestamp': datetime.now(pytz.timezone('Asia/Ho_Chi_Minh')).strftime("%Y-%m-%d %H:%M:%S")
                    }
                    if send_to_sheet(client, sheet_name, data):
                        st.success("‚úÖ ƒê√£ g·ª≠i!")
                        st.balloons()
                        st.session_state.scanned_product = None
                        st.session_state.barcode_data = None
                        st.rerun()
                else:
                    st.warning("‚ö†Ô∏è Nh·∫≠p s·ªë l∆∞·ª£ng > 0!")

# ===== TAB 2: XEM D·ªÆ LI·ªÜU =====
with tab2:
    st.subheader("üìä D·ªØ li·ªáu ƒë√£ l∆∞u")
    
    today = date.today()
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("T·ª´ ng√†y:", value=today)
    with col2:
        end_date = st.date_input("ƒê·∫øn ng√†y:", value=today)
    
    if st.button("üîÑ T·∫£i d·ªØ li·ªáu"):
        sheet = get_worksheet(client, sheet_name, "Barcode_Data")
        if sheet:
            with st.spinner("ƒêang t·∫£i..."):
                data = sheet.get_all_records()
                if data:
                    df = pd.DataFrame(data)
                    df['Th·ªùi gian'] = pd.to_datetime(df['Th·ªùi gian'], format='%Y-%m-%d %H:%M:%S', errors='coerce')
                    df = df.dropna(subset=['Th·ªùi gian'])
                    
                    mask = (df['Th·ªùi gian'].dt.date >= start_date) & (df['Th·ªùi gian'].dt.date <= end_date)
                    filtered_df = df[mask]
                    
                    if not filtered_df.empty:
                        st.dataframe(filtered_df, use_container_width=True)
                        
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("T·ªïng b·∫£n ghi", len(filtered_df))
                        with col2:
                            st.metric("S·ªë s·∫£n ph·∫©m", filtered_df['Barcode'].nunique())
                        with col3:
                            st.metric("T·ªïng SL", f"{filtered_df['S·ªë l∆∞·ª£ng'].sum():.2f}")
                        
                        csv = filtered_df.to_csv(index=False)
                        st.download_button(
                            "üì• T·∫£i CSV",
                            csv,
                            f"data_{start_date}_to_{end_date}.csv",
                            "text/csv"
                        )
                    else:
                        st.info("üì≠ Kh√¥ng c√≥ d·ªØ li·ªáu!")
                else:
                    st.info("üì≠ Ch∆∞a c√≥ d·ªØ li·ªáu!")

# ===== TAB 3: C·∫¨P NH·∫¨T BARCODE =====
with tab3:
    st.subheader("üõ† C·∫≠p nh·∫≠t Barcode")
    
    barcode_input = st.text_input("M√£ Barcode", max_chars=20)
    product_name = st.text_input("T√™n s·∫£n ph·∫©m")
    brand = st.text_input("Th∆∞∆°ng hi·ªáu")
    
    if st.button("üíæ L∆∞u", type="primary"):
        if barcode_input and product_name and brand:
            if update_product(client, sheet_name, barcode_input, product_name, brand):
                st.success(f"‚úÖ ƒê√£ l∆∞u: {barcode_input}")
                st.balloons()
            else:
                st.error("‚ùå L·ªói!")
        else:
            st.warning("‚ö†Ô∏è Nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666;'>@2025 Viva Star Coffee</div>",
    unsafe_allow_html=True
)
