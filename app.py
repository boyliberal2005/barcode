import streamlit as st
from pyzbar import pyzbar
import cv2
import numpy as np
from PIL import Image
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
import pandas as pd
import pytz
import google.generativeai as genai
import io

# C·∫•u h√¨nh Gemini API
genai.configure(api_key="AIzaSyA52qNG0pm7JD9E5Jhp_GhcwjdgXJd8sXQ")
# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Qu√©t Barcode",
    page_icon="üì¶",
    layout="centered"
)

# CSS t√πy ch·ªânh
st.markdown("""
    <style>
    .main {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    .stButton>button {
        width: 100%;
        background-color: #4CAF50;
        color: white;
        height: 3em;
        border-radius: 10px;
        font-weight: bold;
    }
    .success-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    .error-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }
    </style>
""", unsafe_allow_html=True)

# Kh·ªüi t·∫°o session state
if 'scanned_product' not in st.session_state:
    st.session_state.scanned_product = None
if 'barcode_data' not in st.session_state:
    st.session_state.barcode_data = None

# Header
st.title("üì¶ Qu√©t Barcode S·∫£n Ph·∫©m")
st.markdown("---")

# H√†m k·∫øt n·ªëi Google Sheets
def connect_google_sheet(sheet_name, worksheet_name):
    """K·∫øt n·ªëi v·ªõi Google Sheets v√† tr·∫£ v·ªÅ worksheet, t·∫°o n·∫øu ch∆∞a t·ªìn t·∫°i"""
    try:
        scope = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ]
        if "gcp_service_account" in st.secrets:
            creds = Credentials.from_service_account_info(
                dict(st.secrets["gcp_service_account"]), scopes=scope
            )
        else:
            creds = Credentials.from_service_account_file('credentials.json', scopes=scope)
        client = gspread.authorize(creds)
        spreadsheet = client.open(sheet_name)
        
        # Ki·ªÉm tra worksheet t·ªìn t·∫°i
        try:
            sheet = spreadsheet.worksheet(worksheet_name)
        except gspread.exceptions.WorksheetNotFound:
            st.warning(f"Worksheet '{worksheet_name}' kh√¥ng t·ªìn t·∫°i. ƒêang t·∫°o m·ªõi...")
            sheet = spreadsheet.add_worksheet(title=worksheet_name, rows=100, cols=10)
            # Th√™m header t√πy theo worksheet
            if worksheet_name == "Barcode_Data":
                sheet.append_row(["Barcode", "T√™n SP", "Th∆∞∆°ng hi·ªáu", "S·ªë l∆∞·ª£ng", "ƒê∆°n v·ªã", "Th·ªùi gian"])
            elif worksheet_name == "Product_List":
                sheet.append_row(["Barcode", "T√™n SP", "Th∆∞∆°ng hi·ªáu"])
        return sheet
    except gspread.exceptions.SpreadsheetNotFound:
        st.error(f"Sheet '{sheet_name}' kh√¥ng t·ªìn t·∫°i. Vui l√≤ng t·∫°o sheet v·ªõi t√™n ch√≠nh x√°c!")
        return None
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi Google Sheets ({worksheet_name}): {e}")
        return None

# H√†m qu√©t barcode b·∫±ng pyzbar
def scan_barcode_pyzbar(image):
    """Qu√©t barcode b·∫±ng pyzbar v·ªõi ti·ªÅn x·ª≠ l√Ω n√¢ng cao"""
    try:
        img_array = np.array(image)
        if len(img_array.shape) == 3:
            gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
        else:
            gray = img_array

        gray = cv2.GaussianBlur(gray, (5, 5), 0)
        thresh = cv2.adaptiveThreshold(
            gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2
        )
        edges = cv2.Canny(thresh, 100, 200)
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        if contours:
            largest_contour = max(contours, key=cv2.contourArea)
            x, y, w, h = cv2.boundingRect(largest_contour)
            roi = gray[y:y+h, x:x+w]
            if roi.size == 0:
                roi = gray
        else:
            roi = gray

        barcodes = pyzbar.decode(roi)
        if not barcodes:
            barcodes = pyzbar.decode(gray)

        if barcodes:
            return barcodes[0].data.decode('utf-8')
        return None
    except Exception as e:
        st.error(f"L·ªói pyzbar: {e}")
        return None

# H√†m qu√©t barcode b·∫±ng Gemini AI
def scan_barcode_gemini(image):
    """Qu√©t barcode b·∫±ng Gemini AI"""
    try:
        img_bytes = io.BytesIO()
        image.save(img_bytes, format='PNG')
        img_bytes = img_bytes.getvalue()
        model = genai.GenerativeModel('gemini-2.0-flash')
        response = model.generate_content([
            "Detect and read the barcode in this image. Return only the barcode value as plain text (e.g., '8935049502142'). If no barcode, return 'None'.",
            {"mime_type": "image/png", "data": img_bytes}
        ])
        barcode_text = response.text.strip()
        if barcode_text.lower() != 'none':
            return barcode_text
        return None
    except Exception as e:
        st.error(f"L·ªói Gemini AI: {e}")
        return None

# H√†m qu√©t barcode ch√≠nh
def scan_barcode(image):
    """Qu√©t barcode: pyzbar tr∆∞·ªõc, Gemini fallback"""
    pyzbar_result = scan_barcode_pyzbar(image)
    if pyzbar_result:
        return pyzbar_result
    st.info("ƒêang s·ª≠ d·ª•ng AI Gemini ƒë·ªÉ qu√©t barcode th√¥ng minh h∆°n...")
    return scan_barcode_gemini(image)

# H√†m tra c·ª©u s·∫£n ph·∫©m t·ª´ Google Sheet
def lookup_product(barcode, sheet):
    """Tra c·ª©u th√¥ng tin s·∫£n ph·∫©m t·ª´ barcode trong Google Sheet"""
    try:
        data = sheet.get_all_records()
        df = pd.DataFrame(data)
        if not df.empty and 'Barcode' in df.columns:
            match = df[df['Barcode'] == barcode]
            if not match.empty:
                return {
                    'name': match.iloc[0]['T√™n SP'],
                    'brand': match.iloc[0]['Th∆∞∆°ng hi·ªáu']
                }
        return {'name': 'S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh', 'brand': 'N/A'}
    except Exception as e:
        st.error(f"L·ªói tra c·ª©u s·∫£n ph·∫©m: {e}")
        return {'name': 'S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh', 'brand': 'N/A'}

# H√†m th√™m ho·∫∑c c·∫≠p nh·∫≠t s·∫£n ph·∫©m v√†o Google Sheet
def update_product(sheet, barcode, product_name, brand):
    """Th√™m ho·∫∑c c·∫≠p nh·∫≠t s·∫£n ph·∫©m trong Google Sheet"""
    try:
        data = sheet.get_all_records()
        df = pd.DataFrame(data)
        if not df.empty and 'Barcode' in df.columns:
            match = df[df['Barcode'] == barcode]
            if not match.empty:
                row_index = match.index[0] + 2
                sheet.update_cell(row_index, 2, product_name)
                sheet.update_cell(row_index, 3, brand)
                return True
        sheet.append_row([barcode, product_name, brand])
        return True
    except Exception as e:
        st.error(f"L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m: {e}")
        return False

# H√†m g·ª≠i d·ªØ li·ªáu qu√©t l√™n Google Sheet
def send_to_google_sheet(sheet, data):
    """G·ª≠i d·ªØ li·ªáu qu√©t l√™n Google Sheet"""
    try:
        row = [
            data['barcode'],
            data['product_name'],
            data['brand'],
            data['quantity'],
            data['unit'],
            data['timestamp']
        ]
        sheet.append_row(row)
        return True
    except Exception as e:
        st.error(f"L·ªói g·ª≠i d·ªØ li·ªáu: {e}")
        return False

# Sidebar - C·∫•u h√¨nh Google Sheets
with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh")
    st.subheader("Google Sheets")
    sheet_name = st.text_input(
        "T√™n Google Sheet",
        value="Barcode_Data",
        help="T√™n c·ªßa Google Sheet b·∫°n mu·ªën l∆∞u d·ªØ li·ªáu"
    )
    st.markdown("---")
    st.subheader("üìñ H∆∞·ªõng d·∫´n")
    with st.expander("C√°ch thi·∫øt l·∫≠p Google Sheets"):
        st.markdown("""
            **B∆∞·ªõc 1:** T·∫°o Google Cloud Project
            1. V√†o [Google Cloud Console](https://console.cloud.google.com/)
            2. T·∫°o project m·ªõi
            3. Enable Google Sheets API v√† Google Drive API
            
            **B∆∞·ªõc 2:** T·∫°o Service Account
            1. V√†o IAM & Admin ‚Üí Service Accounts
            2. T·∫°o service account m·ªõi
            3. T·∫°o key (JSON) v√† t·∫£i v·ªÅ
            4. Share Google Sheet v·ªõi email t·ª´ service account
            
            **B∆∞·ªõc 3:** C·∫•u h√¨nh Sheet
            - T·∫°o sheet "Barcode_Data" v·ªõi hai worksheet:
              - "Barcode_Data": Header: Barcode, T√™n SP, Th∆∞∆°ng hi·ªáu, S·ªë l∆∞·ª£ng, ƒê∆°n v·ªã, Th·ªùi gian
              - "Product_List": Header: Barcode, T√™n SP, Th∆∞∆°ng hi·ªáu
        """)

# Main content
try:
    tab1, tab2, tab3 = st.tabs(["üì∏ Qu√©t Barcode", "üìä Xem D·ªØ Li·ªáu", "üõ† C·∫≠p nh·∫≠t Barcode"])
except Exception as e:
    st.error(f"L·ªói khi t·∫°o tabs: {e}")
    st.stop()

with tab1:
    col1, col2 = st.columns([2, 1])
    with col1:
        st.subheader("Ch·ªçn c√°ch qu√©t")
        scan_method = st.radio(
            "Ph∆∞∆°ng th·ª©c qu√©t:",
            ["üì∑ Ch·ª•p ·∫£nh", "üìÅ Upload ·∫£nh", "‚å®Ô∏è Nh·∫≠p th·ªß c√¥ng"],
            horizontal=True
        )

    if scan_method == "üì∑ Ch·ª•p ·∫£nh":
        st.info("""
            **M·∫πo qu√©t barcode:**
            - ƒê·∫∑t barcode ·ªü trung t√¢m khung h√¨nh.
            - ƒê·∫£m b·∫£o √°nh s√°ng t·ªët, tr√°nh b√≥ng ho·∫∑c ph·∫£n chi·∫øu.
            - Gi·ªØ camera ·ªïn ƒë·ªãnh ƒë·ªÉ tr√°nh m·ªù.
        """)
        camera_image = st.camera_input("Ch·ª•p ·∫£nh barcode")
        if camera_image:
            image = Image.open(camera_image)
            st.image(image, caption="·∫¢nh ƒë√£ ch·ª•p", use_column_width=True)
            with st.spinner("ƒêang qu√©t barcode..."):
                barcode = scan_barcode(image)
            if barcode:
                st.session_state.barcode_data = barcode
                product_sheet = connect_google_sheet(sheet_name, "Product_List")
                if product_sheet:
                    st.session_state.scanned_product = lookup_product(barcode, product_sheet)
                    st.success(f"‚úÖ ƒê√£ qu√©t ƒë∆∞·ª£c barcode: {barcode}")
                else:
                    st.error("‚ùå L·ªói k·∫øt n·ªëi sheet Product_List!")
            else:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y barcode trong ·∫£nh! Vui l√≤ng th·ª≠ l·∫°i.")

    elif scan_method == "üìÅ Upload ·∫£nh":
        uploaded_file = st.file_uploader(
            "Ch·ªçn ·∫£nh barcode",
            type=['jpg', 'jpeg', 'png'],
            help="H·ªó tr·ª£ JPG, JPEG, PNG"
        )
        if uploaded_file:
            image = Image.open(uploaded_file)
            st.image(image, caption="·∫¢nh ƒë√£ upload", use_column_width=True)
            with st.spinner("ƒêang qu√©t barcode..."):
                barcode = scan_barcode(image)
            if barcode:
                st.session_state.barcode_data = barcode
                product_sheet = connect_google_sheet(sheet_name, "Product_List")
                if product_sheet:
                    st.session_state.scanned_product = lookup_product(barcode, product_sheet)
                    st.success(f"‚úÖ ƒê√£ qu√©t ƒë∆∞·ª£c barcode: {barcode}")
                else:
                    st.error("‚ùå L·ªói k·∫øt n·ªëi sheet Product_List!")
            else:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y barcode trong ·∫£nh! Vui l√≤ng th·ª≠ l·∫°i.")

    else:  # Nh·∫≠p th·ªß c√¥ng
        manual_barcode = st.text_input("Nh·∫≠p m√£ barcode:", max_chars=20)
        if st.button("üîç Tra c·ª©u"):
            if manual_barcode:
                st.session_state.barcode_data = manual_barcode
                product_sheet = connect_google_sheet(sheet_name, "Product_List")
                if product_sheet:
                    st.session_state.scanned_product = lookup_product(manual_barcode, product_sheet)
                    st.success(f"‚úÖ ƒê√£ tra c·ª©u barcode: {manual_barcode}")
                else:
                    st.error("‚ùå L·ªói k·∫øt n·ªëi sheet Product_List!")
            else:
                st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ barcode!")

    if st.session_state.scanned_product:
        st.markdown("---")
        st.subheader("üì¶ Th√¥ng tin s·∫£n ph·∫©m")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("T√™n s·∫£n ph·∫©m", st.session_state.scanned_product['name'])
        with col2:
            st.metric("Th∆∞∆°ng hi·ªáu", st.session_state.scanned_product['brand'])
        st.info(f"üî¢ Barcode: **{st.session_state.barcode_data}**")
        st.markdown("---")
        st.subheader("üìù Nh·∫≠p s·ªë l∆∞·ª£ng")
        col1, col2 = st.columns([2, 1])
        with col1:
            quantity = st.number_input(
                "S·ªë l∆∞·ª£ng:",
                min_value=0.0,
                step=0.1,
                format="%.2f"
            )
        with col2:
            unit = st.selectbox(
                "ƒê∆°n v·ªã:",
                ["ml", "L", "g", "kg", "c√°i", "h·ªôp", "chai"]
            )
        st.markdown("---")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÑ Qu√©t l·∫°i", use_container_width=True):
                st.session_state.scanned_product = None
                st.session_state.barcode_data = None
                st.rerun()
        with col2:
            if st.button("üì§ G·ª≠i l√™n Google Sheets", type="primary", use_container_width=True):
                if quantity > 0:
                    data_sheet = connect_google_sheet(sheet_name, "Barcode_Data")
                    if data_sheet:
                        data = {
                            'barcode': st.session_state.barcode_data,
                            'product_name': st.session_state.scanned_product['name'],
                            'brand': st.session_state.scanned_product['brand'],
                            'quantity': quantity,
                            'unit': unit,
                            'timestamp': datetime.now(pytz.timezone('Asia/Ho_Chi_Minh')).strftime("%Y-%m-%d %H:%M:%S")
                        }
                        if send_to_google_sheet(data_sheet, data):
                            st.success("‚úÖ ƒê√£ g·ª≠i d·ªØ li·ªáu th√†nh c√¥ng!")
                            st.balloons()
                            st.session_state.scanned_product = None
                            st.session_state.barcode_data = None
                        else:
                            st.error("‚ùå G·ª≠i d·ªØ li·ªáu th·∫•t b·∫°i!")
                    else:
                        st.error("‚ùå L·ªói k·∫øt n·ªëi sheet Barcode_Data!")
                else:
                    st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng > 0!")

with tab2:
    st.subheader("üìä D·ªØ li·ªáu ƒë√£ l∆∞u")
    if st.button("üîÑ T·∫£i d·ªØ li·ªáu t·ª´ Google Sheets"):
        data_sheet = connect_google_sheet(sheet_name, "Barcode_Data")
        if data_sheet:
            try:
                data = data_sheet.get_all_records()
                if data:
                    df = pd.DataFrame(data)
                    st.dataframe(df, use_container_width=True)
                    st.markdown("---")
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("T·ªïng s·ªë b·∫£n ghi", len(df))
                    with col2:
                        st.metric("S·ªë s·∫£n ph·∫©m", df['Barcode'].nunique())
                    with col3:
                        if 'S·ªë l∆∞·ª£ng' in df.columns:
                            total_qty = df['S·ªë l∆∞·ª£ng'].sum()
                            st.metric("T·ªïng s·ªë l∆∞·ª£ng", f"{total_qty:.2f}")
                else:
                    st.info("üì≠ Ch∆∞a c√≥ d·ªØ li·ªáu n√†o!")
            except Exception as e:
                st.error(f"L·ªói t·∫£i d·ªØ li·ªáu: {e}")

with tab3:
    st.subheader("üõ† C·∫≠p nh·∫≠t Barcode")
    st.markdown("Nh·∫≠p th√¥ng tin ƒë·ªÉ th√™m ho·∫∑c c·∫≠p nh·∫≠t s·∫£n ph·∫©m.")
    barcode_input = st.text_input("M√£ Barcode", max_chars=20)
    product_name = st.text_input("T√™n s·∫£n ph·∫©m")
    brand = st.text_input("Th∆∞∆°ng hi·ªáu")
    if st.button("üíæ L∆∞u s·∫£n ph·∫©m", type="primary"):
        if barcode_input and product_name and brand:
            product_sheet = connect_google_sheet(sheet_name, "Product_List")
            if product_sheet:
                if update_product(product_sheet, barcode_input, product_name, brand):
                    st.success(f"‚úÖ ƒê√£ l∆∞u/c·∫≠p nh·∫≠t barcode: {barcode_input}")
                    st.balloons()
                else:
                    st.error("‚ùå L·ªói khi l∆∞u s·∫£n ph·∫©m!")
            else:
                st.error("‚ùå L·ªói k·∫øt n·ªëi sheet Product_List!")
        else:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666;'>Made with ‚ù§Ô∏è using Streamlit</div>",
    unsafe_allow_html=True
)
