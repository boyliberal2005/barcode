import streamlit as st
from pyzbar import pyzbar
import cv2
import numpy as np
from PIL import Image
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
import pandas as pd

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Qu√©t Barcode",
    page_icon="üì¶",
    layout="centered"
)

# CSS t√πy ch·ªânh
st.markdown("""
    <style>
    .main {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    .stButton>button {
        width: 100%;
        background-color: #4CAF50;
        color: white;
        height: 3em;
        border-radius: 10px;
        font-weight: bold;
    }
    .success-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    .error-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }
    </style>
""", unsafe_allow_html=True)

# Kh·ªüi t·∫°o session state
if 'scanned_product' not in st.session_state:
    st.session_state.scanned_product = None
if 'barcode_data' not in st.session_state:
    st.session_state.barcode_data = None

# Header
st.title("üì¶ Qu√©t Barcode S·∫£n Ph·∫©m")
st.markdown("---")

# H√†m k·∫øt n·ªëi Google Sheets
def connect_google_sheet(credentials_file, sheet_name):
    """K·∫øt n·ªëi v·ªõi Google Sheets"""
    try:
        scope = ['https://spreadsheets.google.com/feeds',
                 'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_name(credentials_file, scope)
        client = gspread.authorize(creds)
        sheet = client.open(sheet_name).sheet1
        return sheet
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi Google Sheets: {e}")
        return None

# H√†m qu√©t barcode t·ª´ ·∫£nh
def scan_barcode(image):
    """Qu√©t barcode t·ª´ ·∫£nh"""
    # Chuy·ªÉn ƒë·ªïi PIL Image sang numpy array
    img_array = np.array(image)
    
    # Chuy·ªÉn sang grayscale n·∫øu l√† ·∫£nh m√†u
    if len(img_array.shape) == 3:
        gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
    else:
        gray = img_array
    
    # Qu√©t barcode
    barcodes = pyzbar.decode(gray)
    
    if barcodes:
        return barcodes[0].data.decode('utf-8')
    return None

# H√†m tra c·ª©u s·∫£n ph·∫©m (database gi·∫£)
def lookup_product(barcode):
    """Tra c·ª©u th√¥ng tin s·∫£n ph·∫©m t·ª´ barcode"""
    # Database m·∫´u - trong th·ª±c t·∫ø c√≥ th·ªÉ k·∫øt n·ªëi API ho·∫∑c database
    products = {
        '8935049502142': {'name': 'Coca Cola 330ml', 'brand': 'Coca Cola'},
        '8934673102384': {'name': 'Pepsi 330ml', 'brand': 'Pepsi'},
        '8936036021028': {'name': 'M√¨ H·∫£o H·∫£o', 'brand': 'Acecook'},
        '8934563144104': {'name': 'N∆∞·ªõc su·ªëi Lavie 500ml', 'brand': 'Lavie'},
    }
    
    if barcode in products:
        return products[barcode]
    else:
        return {'name': 'S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh', 'brand': 'N/A'}

# H√†m g·ª≠i d·ªØ li·ªáu l√™n Google Sheets
def send_to_google_sheet(sheet, data):
    """G·ª≠i d·ªØ li·ªáu l√™n Google Sheets"""
    try:
        row = [
            data['barcode'],
            data['product_name'],
            data['brand'],
            data['quantity'],
            data['unit'],
            data['timestamp']
        ]
        sheet.append_row(row)
        return True
    except Exception as e:
        st.error(f"L·ªói g·ª≠i d·ªØ li·ªáu: {e}")
        return False

# Sidebar - C·∫•u h√¨nh Google Sheets
with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh")
    
    st.subheader("Google Sheets")
    credentials_file = st.text_input(
        "ƒê∆∞·ªùng d·∫´n file credentials JSON",
        value="credentials.json",
        help="File JSON t·ª´ Google Cloud Console"
    )
    sheet_name = st.text_input(
        "T√™n Google Sheet",
        value="Barcode_Data",
        help="T√™n c·ªßa Google Sheet b·∫°n mu·ªën l∆∞u d·ªØ li·ªáu"
    )
    
    st.markdown("---")
    st.subheader("üìñ H∆∞·ªõng d·∫´n")
    with st.expander("C√°ch thi·∫øt l·∫≠p Google Sheets"):
        st.markdown("""
        **B∆∞·ªõc 1:** T·∫°o Google Cloud Project
        1. V√†o [Google Cloud Console](https://console.cloud.google.com/)
        2. T·∫°o project m·ªõi
        3. Enable Google Sheets API v√† Google Drive API
        
        **B∆∞·ªõc 2:** T·∫°o Service Account
        1. V√†o IAM & Admin ‚Üí Service Accounts
        2. T·∫°o service account m·ªõi
        3. T·∫°o key (JSON) v√† t·∫£i v·ªÅ
        4. ƒê·ªïi t√™n file th√†nh `credentials.json`
        
        **B∆∞·ªõc 3:** Chia s·∫ª Google Sheet
        1. T·∫°o Google Sheet m·ªõi
        2. Th√™m header: Barcode | T√™n SP | Th∆∞∆°ng hi·ªáu | S·ªë l∆∞·ª£ng | ƒê∆°n v·ªã | Th·ªùi gian
        3. Share v·ªõi email t·ª´ service account
        """)

# Main content
tab1, tab2, tab3 = st.tabs(["üì∏ Qu√©t Barcode", "üìä Xem D·ªØ Li·ªáu", "‚ÑπÔ∏è H∆∞·ªõng D·∫´n"])

with tab1:
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("Ch·ªçn c√°ch qu√©t")
        scan_method = st.radio(
            "Ph∆∞∆°ng th·ª©c qu√©t:",
            ["üì∑ Ch·ª•p ·∫£nh", "üìÅ Upload ·∫£nh", "‚å®Ô∏è Nh·∫≠p th·ªß c√¥ng"],
            horizontal=True
        )
    
    # Ph∆∞∆°ng th·ª©c qu√©t
    if scan_method == "üì∑ Ch·ª•p ·∫£nh":
        camera_image = st.camera_input("Ch·ª•p ·∫£nh barcode")
        
        if camera_image:
            image = Image.open(camera_image)
            st.image(image, caption="·∫¢nh ƒë√£ ch·ª•p", use_column_width=True)
            
            with st.spinner("ƒêang qu√©t barcode..."):
                barcode = scan_barcode(image)
                
            if barcode:
                st.session_state.barcode_data = barcode
                st.session_state.scanned_product = lookup_product(barcode)
                st.success(f"‚úÖ ƒê√£ qu√©t ƒë∆∞·ª£c barcode: {barcode}")
            else:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y barcode trong ·∫£nh!")
    
    elif scan_method == "üìÅ Upload ·∫£nh":
        uploaded_file = st.file_uploader(
            "Ch·ªçn ·∫£nh barcode",
            type=['jpg', 'jpeg', 'png'],
            help="H·ªó tr·ª£ JPG, JPEG, PNG"
        )
        
        if uploaded_file:
            image = Image.open(uploaded_file)
            st.image(image, caption="·∫¢nh ƒë√£ upload", use_column_width=True)
            
            with st.spinner("ƒêang qu√©t barcode..."):
                barcode = scan_barcode(image)
                
            if barcode:
                st.session_state.barcode_data = barcode
                st.session_state.scanned_product = lookup_product(barcode)
                st.success(f"‚úÖ ƒê√£ qu√©t ƒë∆∞·ª£c barcode: {barcode}")
            else:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y barcode trong ·∫£nh!")
    
    else:  # Nh·∫≠p th·ªß c√¥ng
        manual_barcode = st.text_input("Nh·∫≠p m√£ barcode:", max_chars=20)
        
        if st.button("üîç Tra c·ª©u"):
            if manual_barcode:
                st.session_state.barcode_data = manual_barcode
                st.session_state.scanned_product = lookup_product(manual_barcode)
                st.success(f"‚úÖ ƒê√£ tra c·ª©u barcode: {manual_barcode}")
            else:
                st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ barcode!")
    
    # Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m v√† form nh·∫≠p li·ªáu
    if st.session_state.scanned_product:
        st.markdown("---")
        st.subheader("üì¶ Th√¥ng tin s·∫£n ph·∫©m")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("T√™n s·∫£n ph·∫©m", st.session_state.scanned_product['name'])
        with col2:
            st.metric("Th∆∞∆°ng hi·ªáu", st.session_state.scanned_product['brand'])
        
        st.info(f"üî¢ Barcode: **{st.session_state.barcode_data}**")
        
        st.markdown("---")
        st.subheader("üìù Nh·∫≠p s·ªë l∆∞·ª£ng")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            quantity = st.number_input(
                "S·ªë l∆∞·ª£ng:",
                min_value=0.0,
                step=0.1,
                format="%.2f"
            )
        
        with col2:
            unit = st.selectbox(
                "ƒê∆°n v·ªã:",
                ["ml", "L", "g", "kg", "c√°i", "h·ªôp", "chai"]
            )
        
        st.markdown("---")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîÑ Qu√©t l·∫°i", use_container_width=True):
                st.session_state.scanned_product = None
                st.session_state.barcode_data = None
                st.rerun()
        
        with col2:
            if st.button("üì§ G·ª≠i l√™n Google Sheets", type="primary", use_container_width=True):
                if quantity > 0:
                    # K·∫øt n·ªëi Google Sheets
                    sheet = connect_google_sheet(credentials_file, sheet_name)
                    
                    if sheet:
                        # Chu·∫©n b·ªã d·ªØ li·ªáu
                        data = {
                            'barcode': st.session_state.barcode_data,
                            'product_name': st.session_state.scanned_product['name'],
                            'brand': st.session_state.scanned_product['brand'],
                            'quantity': quantity,
                            'unit': unit,
                            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        }
                        
                        # G·ª≠i d·ªØ li·ªáu
                        if send_to_google_sheet(sheet, data):
                            st.success("‚úÖ ƒê√£ g·ª≠i d·ªØ li·ªáu th√†nh c√¥ng!")
                            st.balloons()
                            
                            # Reset
                            st.session_state.scanned_product = None
                            st.session_state.barcode_data = None
                        else:
                            st.error("‚ùå G·ª≠i d·ªØ li·ªáu th·∫•t b·∫°i!")
                else:
                    st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng > 0!")

with tab2:
    st.subheader("üìä D·ªØ li·ªáu ƒë√£ l∆∞u")
    
    if st.button("üîÑ T·∫£i d·ªØ li·ªáu t·ª´ Google Sheets"):
        sheet = connect_google_sheet(credentials_file, sheet_name)
        
        if sheet:
            try:
                # L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu
                data = sheet.get_all_records()
                
                if data:
                    df = pd.DataFrame(data)
                    st.dataframe(df, use_container_width=True)
                    
                    # Th·ªëng k√™
                    st.markdown("---")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("T·ªïng s·ªë b·∫£n ghi", len(df))
                    with col2:
                        st.metric("S·ªë s·∫£n ph·∫©m", df['Barcode'].nunique())
                    with col3:
                        if 'S·ªë l∆∞·ª£ng' in df.columns:
                            total_qty = df['S·ªë l∆∞·ª£ng'].sum()
                            st.metric("T·ªïng s·ªë l∆∞·ª£ng", f"{total_qty:.2f}")
                else:
                    st.info("üì≠ Ch∆∞a c√≥ d·ªØ li·ªáu n√†o!")
            except Exception as e:
                st.error(f"L·ªói t·∫£i d·ªØ li·ªáu: {e}")

with tab3:
    st.subheader("üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
    
    st.markdown("""
    ### üöÄ B·∫Øt ƒë·∫ßu nhanh
    
    **B∆∞·ªõc 1: C√†i ƒë·∫∑t th∆∞ vi·ªán**
    ```bash
    pip install streamlit pyzbar pillow opencv-python gspread oauth2client pandas
    ```
    
    **B∆∞·ªõc 2: Thi·∫øt l·∫≠p Google Sheets API**
    1. L√†m theo h∆∞·ªõng d·∫´n trong sidebar
    2. ƒê·∫∑t file `credentials.json` c√πng th∆∞ m·ª•c v·ªõi app
    3. T·∫°o Google Sheet v·ªõi header nh∆∞ sau:
       - Barcode | T√™n SP | Th∆∞∆°ng hi·ªáu | S·ªë l∆∞·ª£ng | ƒê∆°n v·ªã | Th·ªùi gian
    
    **B∆∞·ªõc 3: Ch·∫°y ·ª©ng d·ª•ng**
    ```bash
    streamlit run app.py
    ```
    
    ### üì± S·ª≠ d·ª•ng tr√™n ƒëi·ªán tho·∫°i
    1. Deploy l√™n Streamlit Cloud (mi·ªÖn ph√≠)
    2. Truy c·∫≠p link t·ª´ ƒëi·ªán tho·∫°i
    3. Cho ph√©p truy c·∫≠p camera
    4. Qu√©t v√† g·ª≠i d·ªØ li·ªáu!
    
    ### üéØ T√≠nh nƒÉng
    - ‚úÖ Qu√©t barcode t·ª´ camera ho·∫∑c ·∫£nh
    - ‚úÖ Nh·∫≠p th·ªß c√¥ng m√£ barcode
    - ‚úÖ Nh·∫≠p s·ªë l∆∞·ª£ng linh ho·∫°t (ml, g, kg, c√°i...)
    - ‚úÖ T·ª± ƒë·ªông g·ª≠i l√™n Google Sheets
    - ‚úÖ Xem d·ªØ li·ªáu v√† th·ªëng k√™
    - ‚úÖ Giao di·ªán ƒë·∫πp, d·ªÖ s·ª≠ d·ª•ng
    
    ### üîß L∆∞u √Ω k·ªπ thu·∫≠t
    - C·∫ßn c√†i **zbar** tr√™n h·ªá th·ªëng:
      - Windows: T·∫£i [zbar-0.10-setup.exe](http://zbar.sourceforge.net/download.html)
      - Mac: `brew install zbar`
      - Linux: `sudo apt-get install libzbar0`
    
    ### üí° M·∫πo
    - Ch·ª•p ·∫£nh barcode r√µ n√©t, ƒë·ªß s√°ng
    - ƒê·∫∑t barcode n·∫±m ngang
    - Kho·∫£ng c√°ch v·ª´a ph·∫£i v·ªõi camera
    """)
    
    st.markdown("---")
    st.info("üí¨ C√≥ th·∫Øc m·∫Øc? H√£y ki·ªÉm tra file README ho·∫∑c li√™n h·ªá support!")

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666;'>Made with ‚ù§Ô∏è using Streamlit</div>",
    unsafe_allow_html=True
)