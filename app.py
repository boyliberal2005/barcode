import streamlit as st
from pyzbar import pyzbar
import cv2
import numpy as np
from PIL import Image
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime
import pandas as pd
import pytz
import google.generativeai as genai
import io

# C·∫•u h√¨nh Gemini API
genai.configure(api_key="AIzaSyA52qNG0pm7JD9E5Jhp_GhcwjdgXJd8sXQ")

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Qu√©t Barcode",
    page_icon="üì¶",
    layout="centered"
)

# CSS t√πy ch·ªânh
st.markdown("""
    <style>
    .main {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    .stButton>button {
        width: 100%;
        background-color: #4CAF50;
        color: white;
        height: 3em;
        border-radius: 10px;
        font-weight: bold;
    }
    .success-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }
    .error-box {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }
    </style>
""", unsafe_allow_html=True)

# Kh·ªüi t·∫°o session state
if 'scanned_product' not in st.session_state:
    st.session_state.scanned_product = None
if 'barcode_data' not in st.session_state:
    st.session_state.barcode_data = None

# Header
st.title("üì¶ Qu√©t Barcode S·∫£n Ph·∫©m")
st.markdown("---")

# H√†m k·∫øt n·ªëi Google Sheets
def connect_google_sheet(sheet_name):
    """K·∫øt n·ªëi v·ªõi Google Sheets"""
    try:
        scope = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ]
        if "gcp_service_account" in st.secrets:
            creds = Credentials.from_service_account_info(
                dict(st.secrets["gcp_service_account"]), scopes=scope
            )
        else:
            creds = Credentials.from_service_account_file('credentials.json', scopes=scope)
        client = gspread.authorize(creds)
        sheet = client.open(sheet_name).sheet1
        return sheet
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi Google Sheets: {e}")
        return None

# H√†m qu√©t barcode b·∫±ng pyzbar v√† OpenCV
def scan_barcode_pyzbar(image):
    """Qu√©t barcode b·∫±ng pyzbar v·ªõi ti·ªÅn x·ª≠ l√Ω n√¢ng cao"""
    try:
        img_array = np.array(image)
        if len(img_array.shape) == 3:
            gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
        else:
            gray = img_array

        # L√†m m·ªãn ·∫£nh ƒë·ªÉ gi·∫£m nhi·ªÖu
        gray = cv2.GaussianBlur(gray, (5, 5), 0)

        # √Åp d·ª•ng ng∆∞·ª°ng th√≠ch nghi ƒë·ªÉ c·∫£i thi·ªán ƒë·ªô t∆∞∆°ng ph·∫£n
        thresh = cv2.adaptiveThreshold(
            gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2
        )

        # Ph√°t hi·ªán c·∫°nh b·∫±ng Canny ƒë·ªÉ t√¨m v√πng barcode
        edges = cv2.Canny(thresh, 100, 200)

        # T√¨m contours ƒë·ªÉ x√°c ƒë·ªãnh v√πng barcode
        contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        if contours:
            # Ch·ªçn contour l·ªõn nh·∫•t (gi·∫£ ƒë·ªãnh l√† v√πng barcode)
            largest_contour = max(contours, key=cv2.contourArea)
            x, y, w, h = cv2.boundingRect(largest_contour)
            # C·∫Øt v√πng barcode
            roi = gray[y:y+h, x:x+w]
            if roi.size == 0:
                roi = gray  # Fallback v·ªÅ ·∫£nh g·ªëc n·∫øu c·∫Øt th·∫•t b·∫°i
        else:
            roi = gray

        # Th·ª≠ qu√©t barcode tr√™n v√πng ƒë√£ c·∫Øt
        barcodes = pyzbar.decode(roi)
        if not barcodes:
            # Th·ª≠ l·∫°i v·ªõi ·∫£nh g·ªëc n·∫øu kh√¥ng t√¨m th·∫•y trong v√πng c·∫Øt
            barcodes = pyzbar.decode(gray)

        if barcodes:
            return barcodes[0].data.decode('utf-8')
        return None
    except Exception as e:
        st.error(f"L·ªói pyzbar: {e}")
        return None

# H√†m qu√©t barcode b·∫±ng Gemini AI
def scan_barcode_gemini(image):
    """Qu√©t barcode b·∫±ng Gemini AI"""
    try:
        # Chuy·ªÉn PIL Image th√†nh bytes cho API
        img_bytes = io.BytesIO()
        image.save(img_bytes, format='PNG')
        img_bytes = img_bytes.getvalue()

        # Prompt cho Gemini
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content([
            "Detect and read the barcode in this image. Return only the barcode value as plain text (e.g., '8935049502142'). If no barcode, return 'None'.",
            {"mime_type": "image/png", "data": img_bytes}
        ])
        
        barcode_text = response.text.strip()
        if barcode_text.lower() != 'none':
            return barcode_text
        return None
    except Exception as e:
        st.error(f"L·ªói Gemini AI: {e}")
        return None

# H√†m qu√©t barcode ch√≠nh (k·∫øt h·ª£p pyzbar + Gemini fallback)
def scan_barcode(image):
    """Qu√©t barcode: pyzbar tr∆∞·ªõc, Gemini fallback n·∫øu c·∫ßn"""
    pyzbar_result = scan_barcode_pyzbar(image)
    if pyzbar_result:
        return pyzbar_result
    
    # Fallback ƒë·∫øn Gemini n·∫øu pyzbar th·∫•t b·∫°i
    st.info("ƒêang s·ª≠ d·ª•ng AI Gemini ƒë·ªÉ qu√©t barcode th√¥ng minh h∆°n...")
    return scan_barcode_gemini(image)

# H√†m tra c·ª©u s·∫£n ph·∫©m
def lookup_product(barcode):
    """Tra c·ª©u th√¥ng tin s·∫£n ph·∫©m t·ª´ barcode"""
    products = {
        '8935049502142': {'name': 'Coca Cola 330ml', 'brand': 'Coca Cola'},
        '8934673102384': {'name': 'Pepsi 330ml', 'brand': 'Pepsi'},
        '8936036021028': {'name': 'M√¨ H·∫£o H·∫£o', 'brand': 'Acecook'},
        '8934563144104': {'name': 'N∆∞·ªõc su·ªëi Lavie 500ml', 'brand': 'Lavie'},
    }
    return products.get(barcode, {'name': 'S·∫£n ph·∫©m kh√¥ng x√°c ƒë·ªãnh', 'brand': 'N/A'})

# H√†m g·ª≠i d·ªØ li·ªáu l√™n Google Sheets
def send_to_google_sheet(sheet, data):
    """G·ª≠i d·ªØ li·ªáu l√™n Google Sheets"""
    try:
        row = [
            data['barcode'],
            data['product_name'],
            data['brand'],
            data['quantity'],
            data['unit'],
            data['timestamp']
        ]
        sheet.append_row(row)
        return True
    except Exception as e:
        st.error(f"L·ªói g·ª≠i d·ªØ li·ªáu: {e}")
        return False

# Sidebar - C·∫•u h√¨nh Google Sheets
with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh")
    st.subheader("Google Sheets")
    sheet_name = st.text_input(
        "T√™n Google Sheet",
        value="Barcode_Data",
        help="T√™n c·ªßa Google Sheet b·∫°n mu·ªën l∆∞u d·ªØ li·ªáu"
    )
    st.markdown("---")
    st.subheader("üìñ H∆∞·ªõng d·∫´n")
    with st.expander("C√°ch thi·∫øt l·∫≠p Google Sheets"):
        st.markdown("""
            **B∆∞·ªõc 1:** T·∫°o Google Cloud Project
            1. V√†o [Google Cloud Console](https://console.cloud.google.com/)
            2. T·∫°o project m·ªõi
            3. Enable Google Sheets API v√† Google Drive API
            
            **B∆∞·ªõc 2:** T·∫°o Service Account
            1. V√†o IAM & Admin ‚Üí Service Accounts
            2. T·∫°o service account m·ªõi
            3. T·∫°o key (JSON) v√† t·∫£i v·ªÅ
            4. Share Google Sheet v·ªõi email t·ª´ service account
        """)

# Main content
try:
    tab1, tab2 = st.tabs(["üì∏ Qu√©t Barcode", "üìä Xem D·ªØ Li·ªáu"])
except Exception as e:
    st.error(f"L·ªói khi t·∫°o tabs: {e}")
    st.stop()

with tab1:
    col1, col2 = st.columns([2, 1])
    with col1:
        st.subheader("Ch·ªçn c√°ch qu√©t")
        scan_method = st.radio(
            "Ph∆∞∆°ng th·ª©c qu√©t:",
            ["üì∑ Ch·ª•p ·∫£nh", "üìÅ Upload ·∫£nh", "‚å®Ô∏è Nh·∫≠p th·ªß c√¥ng"],
            horizontal=True
        )

    # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng camera
    if scan_method == "üì∑ Ch·ª•p ·∫£nh":
        st.info("""
            **M·∫πo qu√©t barcode:**
            - ƒê·∫∑t barcode ·ªü trung t√¢m khung h√¨nh.
            - ƒê·∫£m b·∫£o √°nh s√°ng t·ªët, tr√°nh b√≥ng ho·∫∑c ph·∫£n chi·∫øu.
            - Gi·ªØ camera ·ªïn ƒë·ªãnh ƒë·ªÉ tr√°nh m·ªù.
        """)
        camera_image = st.camera_input("Ch·ª•p ·∫£nh barcode")
        if camera_image:
            image = Image.open(camera_image)
            st.image(image, caption="·∫¢nh ƒë√£ ch·ª•p", use_column_width=True)
            with st.spinner("ƒêang qu√©t barcode..."):
                barcode = scan_barcode(image)
            if barcode:
                st.session_state.barcode_data = barcode
                st.session_state.scanned_product = lookup_product(barcode)
                st.success(f"‚úÖ ƒê√£ qu√©t ƒë∆∞·ª£c barcode: {barcode}")
            else:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y barcode trong ·∫£nh! Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh r√µ n√©t h∆°n.")

    elif scan_method == "üìÅ Upload ·∫£nh":
        uploaded_file = st.file_uploader(
            "Ch·ªçn ·∫£nh barcode",
            type=['jpg', 'jpeg', 'png'],
            help="H·ªó tr·ª£ JPG, JPEG, PNG"
        )
        if uploaded_file:
            image = Image.open(uploaded_file)
            st.image(image, caption="·∫¢nh ƒë√£ upload", use_column_width=True)
            with st.spinner("ƒêang qu√©t barcode..."):
                barcode = scan_barcode(image)
            if barcode:
                st.session_state.barcode_data = barcode
                st.session_state.scanned_product = lookup_product(barcode)
                st.success(f"‚úÖ ƒê√£ qu√©t ƒë∆∞·ª£c barcode: {barcode}")
            else:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y barcode trong ·∫£nh! Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh r√µ n√©t h∆°n.")

    else:  # Nh·∫≠p th·ªß c√¥ng
        manual_barcode = st.text_input("Nh·∫≠p m√£ barcode:", max_chars=20)
        if st.button("üîç Tra c·ª©u"):
            if manual_barcode:
                st.session_state.barcode_data = manual_barcode
                st.session_state.scanned_product = lookup_product(manual_barcode)
                st.success(f"‚úÖ ƒê√£ tra c·ª©u barcode: {manual_barcode}")
            else:
                st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ barcode!")

    if st.session_state.scanned_product:
        st.markdown("---")
        st.subheader("üì¶ Th√¥ng tin s·∫£n ph·∫©m")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("T√™n s·∫£n ph·∫©m", st.session_state.scanned_product['name'])
        with col2:
            st.metric("Th∆∞∆°ng hi·ªáu", st.session_state.scanned_product['brand'])
        st.info(f"üî¢ Barcode: **{st.session_state.barcode_data}**")
        st.markdown("---")
        st.subheader("üìù Nh·∫≠p s·ªë l∆∞·ª£ng")
        col1, col2 = st.columns([2, 1])
        with col1:
            quantity = st.number_input(
                "S·ªë l∆∞·ª£ng:",
                min_value=0.0,
                step=0.1,
                format="%.2f"
            )
        with col2:
            unit = st.selectbox(
                "ƒê∆°n v·ªã:",
                ["ml", "L", "g", "kg", "c√°i", "h·ªôp", "chai"]
            )
        st.markdown("---")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÑ Qu√©t l·∫°i", use_container_width=True):
                st.session_state.scanned_product = None
                st.session_state.barcode_data = None
                st.rerun()
        with col2:
            if st.button("üì§ G·ª≠i l√™n Google Sheets", type="primary", use_container_width=True):
                if quantity > 0:
                    sheet = connect_google_sheet(sheet_name)
                    if sheet:
                        data = {
                            'barcode': st.session_state.barcode_data,
                            'product_name': st.session_state.scanned_product['name'],
                            'brand': st.session_state.scanned_product['brand'],
                            'quantity': quantity,
                            'unit': unit,
                            'timestamp': datetime.now(pytz.timezone('Asia/Ho_Chi_Minh')).strftime("%Y-%m-%d %H:%M:%S")
                        }
                        if send_to_google_sheet(sheet, data):
                            st.success("‚úÖ ƒê√£ g·ª≠i d·ªØ li·ªáu th√†nh c√¥ng!")
                            st.balloons()
                            st.session_state.scanned_product = None
                            st.session_state.barcode_data = None
                        else:
                            st.error("‚ùå G·ª≠i d·ªØ li·ªáu th·∫•t b·∫°i!")
                else:
                    st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng > 0!")

with tab2:
    st.subheader("üìä D·ªØ li·ªáu ƒë√£ l∆∞u")
    if st.button("üîÑ T·∫£i d·ªØ li·ªáu t·ª´ Google Sheets"):
        sheet = connect_google_sheet(sheet_name)
        if sheet:
            try:
                data = sheet.get_all_records()
                if data:
                    df = pd.DataFrame(data)
                    st.dataframe(df, use_container_width=True)
                    st.markdown("---")
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("T·ªïng s·ªë b·∫£n ghi", len(df))
                    with col2:
                        st.metric("S·ªë s·∫£n ph·∫©m", df['Barcode'].nunique())
                    with col3:
                        if 'S·ªë l∆∞·ª£ng' in df.columns:
                            total_qty = df['S·ªë l∆∞·ª£ng'].sum()
                            st.metric("T·ªïng s·ªë l∆∞·ª£ng", f"{total_qty:.2f}")
                else:
                    st.info("üì≠ Ch∆∞a c√≥ d·ªØ li·ªáu n√†o!")
            except Exception as e:
                st.error(f"L·ªói t·∫£i d·ªØ li·ªáu: {e}")

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666;'>Made with ‚ù§Ô∏è using Streamlit</div>",
    unsafe_allow_html=True
)
